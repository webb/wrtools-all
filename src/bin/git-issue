#!/usr/bin/env bash

#HELP:COMMAND_NAME: Operations supporting working with github issues
#HELP:Usage: COMMAND_NAME [options] $command $args...

set -o nounset -o errexit -o pipefail

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash
. "$root_dir"/share/wrtools-core/temp.bash

memory_file=$HOME/.git-issue_memory

#HELP:Options:
#HELP:  --help | -h: Print this help
#HELP:  --verbose, -v: Print additional diagnostics

OPTIND=1
while getopts :hvb:-: option
do case "$option" in
       b ) opt_new_branch "$OPTARG";;
       h ) opt_help;;
       v ) opt_verbose;;
       - ) case "$OPTARG" in
               help ) opt_help;;
               verbose ) opt_verbose;;
               new-branch=* ) opt_new_branch "${var#*=}";;
               help=* \
                 | verbose=* ) fail "Long option \"${OPTARG%%=*}\" has unexpected argument";;
               new-branch ) fail "Argument required for long option \"$OPTARG\"";;
               * ) fail "Unknown long option \"${OPTARG%%=*}\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

load_memory () {
    unset parent_branch issue_branch issue_uri
    if [[ -r "$memory_file" ]]
    then while read -r -d $'\n'
         do
             case $REPLY in
                 parent_branch=* ) parent_branch=${REPLY#*=};;
                 issue_branch=* ) issue_branch=${REPLY#*=};;
                 issue_uri=* ) parse_uri "${REPLY#*=}";;
                 * ) fail "unknown memory line \"$REPLY\"";;
             esac
             printf "%s is \"%s\"\n" "${REPLY%%=*}" "${REPLY#*=}"
         done < "$memory_file"
    else warn "no memory file ($memory_file)"
    fi
}

issue_regex='^(https://github.com/[^/]*/[^/]*/issues/)([1-9][0-9]*)$'
unset issue_uri issue_uri_base issue_number
parse_uri () {
    (( $# == 1 )) || fail_assert "must have 1 URI arg"
    if [[ $1 =~ $issue_regex ]]
    then issue_uri=${BASH_REMATCH[0]}
         issue_uri_base=${BASH_REMATCH[1]}
         issue_number=${BASH_REMATCH[2]}
    else return 1
    fi
}

save_memory () {
    printf "parent_branch=%s\n" "${parent_branch-}"
    printf "issue_branch=%s\n" "${issue_branch-}"
    printf "issue_uri=%s\n" "${issue_uri-}"
} > "$memory_file"

temp_make_file status

status_clean () {
    git status --porcelain > "$status"
    if [[ ! -s $status ]]
    then return 0
    else return 1
    fi
}

load_memory

#HELP:Commands:
vecho "command is \"$1\""
case "$1" in
    #HELP:  help: Print this help
    help ) opt_help;;
    #HELP:  checkout $issue: Checkout a new branch for the given issue.
    #HELP:    $issue can be either a github issue URI or issue number for latest repo
    checkout )
        (( $# == 2 )) || fail "command \"$1\" requires a github issue URI or issue number"
        [[ "" = ${issue_branch-} ]] || fail "Can't run \"$1\" when you're on an issue branch"
        [[ "" = ${parent_branch-} ]] || fail "Can't run \"$1\" when you have a parent branch"
        if [[ $2 =~ $issue_regex ]]
        then parse_uri "$2" || fail "bad issue format: \"$2\""
        elif [[ $2 =~ ^([1-9][0-9]*)$ ]]
        then parse_uri "${issue_uri_base}${2}" || fail "bad issue format \"${issue_uri_base}${2}\""
        else fail "unknown issue syntax: \"$2\""
        fi
        parent_branch=$(git symbolic-ref --short HEAD)
        issue_branch=dev-issue-$issue_number
        if git rev-parse --verify --quiet "$issue_branch" > /dev/null
        then fail "issue branch \"$issue_branch\" already exists"
        fi
        git checkout -b "$issue_branch"
        git commit --allow-empty -m "Topic branch for: Issue #$issue_number: $issue_uri."
        save_memory
        exit 0
        ;;
    #HELP:  log: Display & copy to clipboard the log of this branch.
    log )
        (( $# == 1 )) || fail "command \"log\" takes no parameters"
        status_clean || fail "working directory is not clean"
        git catlog "$parent_branch".."$issue_branch"
        exit 0
        ;;
    #HELP:  merge: Merge this issue branch back into the parent branch.
    merge )
        (( $# == 1 )) || fail "command \"$1\" takes no parameters"
        status_clean || fail "working directory is not clean"
        git checkout "$parent_branch"
        git merge --no-ff -m "Merge topic branch for issue $issue_number into parent branch" "$issue_branch"
        git branch -d "$issue_branch"
        parent_branch=
        issue_branch=
        save_memory
        exit 0
        ;;
    #HELP:  squash: Squash the commits of the issue branch down & fast forward merge
    squash )
        (( $# == 1 )) || fail "command \"log\" takes no parameters"
        status_clean || fail "working directory is not clean"
        [[ "" != ${issue_branch-} ]] || fail "Must be on an issue branch to run \"$1\"."
        [[ "" != ${parent_branch-} ]] || fail "Must have a parent branch to run \"$1\"."
        git rebase -i "$parent_branch"
        git checkout "$parent_branch"
        git merge --ff-only "$issue_branch"
        git branch -d "$issue_branch"
        parent_branch=
        issue_branch=
        save_memory
        exit 0
        ;;
    #HELP:  status: Display current state.
    status )
        printf "issue_uri_base is \"%s\"\n" "${issue_uri_base-}"
        printf "issue_number is \"%s\"\n" "${issue_number-}"
        git status --porcelain
        exit 0
        ;;
    #HELP:  open: Open the GitHub issue in the browser.
    open ) exec open "$issue_uri";;
    #HELP:  clean: Forget the git issue memory.
    clean ) rm -f "$memory_file";;
    * ) fail "unknown command \"$1\"";;
esac
